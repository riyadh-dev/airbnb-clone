// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  //imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  //prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model User {
  id            String    @id @default(cuid()) /// @zod.cuid()
  name          String
  email         String    @unique /// @zod.email().toLowerCase()
  emailVerified DateTime?
  avatar        String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  listing       Listing[]
  likedListings Listing[] @relation(name: "likedListings")

  reservations  Reservation[]
  isMockAccount Boolean       @default(false)
}

model Listing {
  id            String   @id @default(cuid()) /// @zod.cuid()
  authorId      String /// @zod.cuid()
  title         String
  description   String
  imageSrc      String /// @zod.url()
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  price         Int
  createdAt     DateTime @default(now())

  reservations Reservation[]

  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likers User[] @relation(name: "likedListings")

  @@index([authorId])
}

model Reservation {
  id         String   @id @default(cuid()) /// @zod.cuid()
  ownerId    String /// @zod.cuid()
  listingId  String /// @zod.cuid()
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  owner   User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([listingId])
}
